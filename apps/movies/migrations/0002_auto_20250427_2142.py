# Generated by Django 5.2 on 2025-04-28 00:42

import csv
import logging
import os
import re
import sys

from django.conf import settings
from django.db import ProgrammingError, migrations

logger = logging.getLogger(__name__)


def split_names(names: str) -> list:
    names_list = re.split(r",\s*|\s+and\s+", names)
    names_list = [name.strip().replace("and", "") for name in names_list]
    return names_list


def load_csv_data(apps, schema_editor):
    if "test" in sys.argv:
        return
    Movie = apps.get_model("movies", "Movie")
    Producer = apps.get_model("movies", "Producer")
    Studio = apps.get_model("movies", "Studio")
    csv_path = os.path.join(settings.BASE_DIR, "movielist.csv")

    try:
        if os.path.exists(csv_path):
            with open(csv_path, newline="", encoding="utf-8") as csv_file:
                reader = csv.DictReader(csv_file, delimiter=";")
                for row in reader:
                    studios = []
                    studios_names_list = split_names(row["studios"])
                    for studio_name in studios_names_list:
                        studio, created = Studio.objects.get_or_create(name=studio_name)
                        studios.append(studio)

                    producers = []
                    producers_names_list = split_names(row["producers"])

                    for producer_name in producers_names_list:
                        producer, created = Producer.objects.get_or_create(
                            name=producer_name
                        )
                        producers.append(producer)

                    movie = Movie.objects.create(
                        year=int(row["year"]),
                        title=row["title"],
                        winner=row["winner"] == "yes",
                    )
                    movie.studio.set(studios)
                    movie.producer.set(producers)
            count = Movie.objects.count()
            logger.info(f"Total de {count} filmes carregados.")

    except ProgrammingError as e:
        logger.error(f"Erro ao carregar o CSV para base: {e}")


class Migration(migrations.Migration):

    dependencies = [
        ("movies", "0001_initial"),
    ]

    operations = [
        migrations.RunPython(load_csv_data, reverse_code=migrations.RunPython.noop),
    ]
